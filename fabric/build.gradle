plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    if (project.immptl_fix) {
        // the repository for ImmPtl
        maven { url 'https://jitpack.io' }

        // the repository for Cloth Config
        maven { url 'https://maven.shedaniel.me' }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    if (project.immptl_fix) {
        // Dependency of Immersive Portals Core:
        modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${project.immptl_version}"){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }

        // Dependency of the Miscellaneous Utility Library from qouteall
        modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${project.immptl_version}"){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }

        // Cloth config (dependency of ImmPtl)
        modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        }

        // If you want the outer Immersive Portals mod (This is usually not needed)
        modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:build:${project.immptl_version}"){
            exclude(group: "net.fabricmc.fabric-api")
            transitive(false)
        }

        // immptl stuff
        api("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
        annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

archivesBaseName = archivesBaseName + "-fabric"
publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
